// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "config.pb.h"
// @@protoc_insertion_point(includes)

namespace aws {
namespace kinesis {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class Tag;
class Record;
class AggregatedRecord;
class Message;
class PutRecord;
class Flush;
class Attempt;
class PutRecordResult;
class Credentials;
class SetCredentials;
class Dimension;
class Stats;
class Metric;
class MetricsRequest;
class MetricsResponse;

// ===================================================================

class Tag : public ::google::protobuf::Message {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tag& default_instance();

  void Swap(Tag* other);

  // implements Message ----------------------------------------------

  Tag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Tag)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Tag* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 partition_key_index = 1;
  inline bool has_partition_key_index() const;
  inline void clear_partition_key_index();
  static const int kPartitionKeyIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 partition_key_index() const;
  inline void set_partition_key_index(::google::protobuf::uint64 value);

  // optional uint64 explicit_hash_key_index = 2;
  inline bool has_explicit_hash_key_index() const;
  inline void clear_explicit_hash_key_index();
  static const int kExplicitHashKeyIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 explicit_hash_key_index() const;
  inline void set_explicit_hash_key_index(::google::protobuf::uint64 value);

  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated .aws.kinesis.protobuf.Tag tags = 4;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 4;
  inline const ::aws::kinesis::protobuf::Tag& tags(int index) const;
  inline ::aws::kinesis::protobuf::Tag* mutable_tags(int index);
  inline ::aws::kinesis::protobuf::Tag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Record)
 private:
  inline void set_has_partition_key_index();
  inline void clear_has_partition_key_index();
  inline void set_has_explicit_hash_key_index();
  inline void clear_has_explicit_hash_key_index();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 partition_key_index_;
  ::google::protobuf::uint64 explicit_hash_key_index_;
  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag > tags_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class AggregatedRecord : public ::google::protobuf::Message {
 public:
  AggregatedRecord();
  virtual ~AggregatedRecord();

  AggregatedRecord(const AggregatedRecord& from);

  inline AggregatedRecord& operator=(const AggregatedRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AggregatedRecord& default_instance();

  void Swap(AggregatedRecord* other);

  // implements Message ----------------------------------------------

  AggregatedRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AggregatedRecord& from);
  void MergeFrom(const AggregatedRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string partition_key_table = 1;
  inline int partition_key_table_size() const;
  inline void clear_partition_key_table();
  static const int kPartitionKeyTableFieldNumber = 1;
  inline const ::std::string& partition_key_table(int index) const;
  inline ::std::string* mutable_partition_key_table(int index);
  inline void set_partition_key_table(int index, const ::std::string& value);
  inline void set_partition_key_table(int index, const char* value);
  inline void set_partition_key_table(int index, const char* value, size_t size);
  inline ::std::string* add_partition_key_table();
  inline void add_partition_key_table(const ::std::string& value);
  inline void add_partition_key_table(const char* value);
  inline void add_partition_key_table(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& partition_key_table() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partition_key_table();

  // repeated string explicit_hash_key_table = 2;
  inline int explicit_hash_key_table_size() const;
  inline void clear_explicit_hash_key_table();
  static const int kExplicitHashKeyTableFieldNumber = 2;
  inline const ::std::string& explicit_hash_key_table(int index) const;
  inline ::std::string* mutable_explicit_hash_key_table(int index);
  inline void set_explicit_hash_key_table(int index, const ::std::string& value);
  inline void set_explicit_hash_key_table(int index, const char* value);
  inline void set_explicit_hash_key_table(int index, const char* value, size_t size);
  inline ::std::string* add_explicit_hash_key_table();
  inline void add_explicit_hash_key_table(const ::std::string& value);
  inline void add_explicit_hash_key_table(const char* value);
  inline void add_explicit_hash_key_table(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& explicit_hash_key_table() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_explicit_hash_key_table();

  // repeated .aws.kinesis.protobuf.Record records = 3;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 3;
  inline const ::aws::kinesis::protobuf::Record& records(int index) const;
  inline ::aws::kinesis::protobuf::Record* mutable_records(int index);
  inline ::aws::kinesis::protobuf::Record* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record >*
      mutable_records();

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.AggregatedRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partition_key_table_;
  ::google::protobuf::RepeatedPtrField< ::std::string> explicit_hash_key_table_;
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record > records_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static AggregatedRecord* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum ActualMessageCase {
    kPutRecord = 3,
    kFlush = 4,
    kPutRecordResult = 5,
    kConfiguration = 6,
    kMetricsRequest = 7,
    kMetricsResponse = 8,
    kSetCredentials = 9,
    ACTUAL_MESSAGE_NOT_SET = 0,
  };

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 source_id = 2;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 source_id() const;
  inline void set_source_id(::google::protobuf::uint64 value);

  // optional .aws.kinesis.protobuf.PutRecord put_record = 3;
  inline bool has_put_record() const;
  inline void clear_put_record();
  static const int kPutRecordFieldNumber = 3;
  inline const ::aws::kinesis::protobuf::PutRecord& put_record() const;
  inline ::aws::kinesis::protobuf::PutRecord* mutable_put_record();
  inline ::aws::kinesis::protobuf::PutRecord* release_put_record();
  inline void set_allocated_put_record(::aws::kinesis::protobuf::PutRecord* put_record);

  // optional .aws.kinesis.protobuf.Flush flush = 4;
  inline bool has_flush() const;
  inline void clear_flush();
  static const int kFlushFieldNumber = 4;
  inline const ::aws::kinesis::protobuf::Flush& flush() const;
  inline ::aws::kinesis::protobuf::Flush* mutable_flush();
  inline ::aws::kinesis::protobuf::Flush* release_flush();
  inline void set_allocated_flush(::aws::kinesis::protobuf::Flush* flush);

  // optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
  inline bool has_put_record_result() const;
  inline void clear_put_record_result();
  static const int kPutRecordResultFieldNumber = 5;
  inline const ::aws::kinesis::protobuf::PutRecordResult& put_record_result() const;
  inline ::aws::kinesis::protobuf::PutRecordResult* mutable_put_record_result();
  inline ::aws::kinesis::protobuf::PutRecordResult* release_put_record_result();
  inline void set_allocated_put_record_result(::aws::kinesis::protobuf::PutRecordResult* put_record_result);

  // optional .aws.kinesis.protobuf.Configuration configuration = 6;
  inline bool has_configuration() const;
  inline void clear_configuration();
  static const int kConfigurationFieldNumber = 6;
  inline const ::aws::kinesis::protobuf::Configuration& configuration() const;
  inline ::aws::kinesis::protobuf::Configuration* mutable_configuration();
  inline ::aws::kinesis::protobuf::Configuration* release_configuration();
  inline void set_allocated_configuration(::aws::kinesis::protobuf::Configuration* configuration);

  // optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
  inline bool has_metrics_request() const;
  inline void clear_metrics_request();
  static const int kMetricsRequestFieldNumber = 7;
  inline const ::aws::kinesis::protobuf::MetricsRequest& metrics_request() const;
  inline ::aws::kinesis::protobuf::MetricsRequest* mutable_metrics_request();
  inline ::aws::kinesis::protobuf::MetricsRequest* release_metrics_request();
  inline void set_allocated_metrics_request(::aws::kinesis::protobuf::MetricsRequest* metrics_request);

  // optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
  inline bool has_metrics_response() const;
  inline void clear_metrics_response();
  static const int kMetricsResponseFieldNumber = 8;
  inline const ::aws::kinesis::protobuf::MetricsResponse& metrics_response() const;
  inline ::aws::kinesis::protobuf::MetricsResponse* mutable_metrics_response();
  inline ::aws::kinesis::protobuf::MetricsResponse* release_metrics_response();
  inline void set_allocated_metrics_response(::aws::kinesis::protobuf::MetricsResponse* metrics_response);

  // optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
  inline bool has_set_credentials() const;
  inline void clear_set_credentials();
  static const int kSetCredentialsFieldNumber = 9;
  inline const ::aws::kinesis::protobuf::SetCredentials& set_credentials() const;
  inline ::aws::kinesis::protobuf::SetCredentials* mutable_set_credentials();
  inline ::aws::kinesis::protobuf::SetCredentials* release_set_credentials();
  inline void set_allocated_set_credentials(::aws::kinesis::protobuf::SetCredentials* set_credentials);

  inline ActualMessageCase actual_message_case() const;
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Message)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_source_id();
  inline void clear_has_source_id();
  inline void set_has_put_record();
  inline void set_has_flush();
  inline void set_has_put_record_result();
  inline void set_has_configuration();
  inline void set_has_metrics_request();
  inline void set_has_metrics_response();
  inline void set_has_set_credentials();

  inline bool has_actual_message();
  void clear_actual_message();
  inline void clear_has_actual_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 source_id_;
  union ActualMessageUnion {
    ::aws::kinesis::protobuf::PutRecord* put_record_;
    ::aws::kinesis::protobuf::Flush* flush_;
    ::aws::kinesis::protobuf::PutRecordResult* put_record_result_;
    ::aws::kinesis::protobuf::Configuration* configuration_;
    ::aws::kinesis::protobuf::MetricsRequest* metrics_request_;
    ::aws::kinesis::protobuf::MetricsResponse* metrics_response_;
    ::aws::kinesis::protobuf::SetCredentials* set_credentials_;
  } actual_message_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class PutRecord : public ::google::protobuf::Message {
 public:
  PutRecord();
  virtual ~PutRecord();

  PutRecord(const PutRecord& from);

  inline PutRecord& operator=(const PutRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRecord& default_instance();

  void Swap(PutRecord* other);

  // implements Message ----------------------------------------------

  PutRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRecord& from);
  void MergeFrom(const PutRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stream_name = 1;
  inline bool has_stream_name() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 1;
  inline const ::std::string& stream_name() const;
  inline void set_stream_name(const ::std::string& value);
  inline void set_stream_name(const char* value);
  inline void set_stream_name(const char* value, size_t size);
  inline ::std::string* mutable_stream_name();
  inline ::std::string* release_stream_name();
  inline void set_allocated_stream_name(::std::string* stream_name);

  // required string partition_key = 2;
  inline bool has_partition_key() const;
  inline void clear_partition_key();
  static const int kPartitionKeyFieldNumber = 2;
  inline const ::std::string& partition_key() const;
  inline void set_partition_key(const ::std::string& value);
  inline void set_partition_key(const char* value);
  inline void set_partition_key(const char* value, size_t size);
  inline ::std::string* mutable_partition_key();
  inline ::std::string* release_partition_key();
  inline void set_allocated_partition_key(::std::string* partition_key);

  // optional string explicit_hash_key = 3;
  inline bool has_explicit_hash_key() const;
  inline void clear_explicit_hash_key();
  static const int kExplicitHashKeyFieldNumber = 3;
  inline const ::std::string& explicit_hash_key() const;
  inline void set_explicit_hash_key(const ::std::string& value);
  inline void set_explicit_hash_key(const char* value);
  inline void set_explicit_hash_key(const char* value, size_t size);
  inline ::std::string* mutable_explicit_hash_key();
  inline ::std::string* release_explicit_hash_key();
  inline void set_allocated_explicit_hash_key(::std::string* explicit_hash_key);

  // required bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.PutRecord)
 private:
  inline void set_has_stream_name();
  inline void clear_has_stream_name();
  inline void set_has_partition_key();
  inline void clear_has_partition_key();
  inline void set_has_explicit_hash_key();
  inline void clear_has_explicit_hash_key();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stream_name_;
  ::std::string* partition_key_;
  ::std::string* explicit_hash_key_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static PutRecord* default_instance_;
};
// -------------------------------------------------------------------

class Flush : public ::google::protobuf::Message {
 public:
  Flush();
  virtual ~Flush();

  Flush(const Flush& from);

  inline Flush& operator=(const Flush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Flush& default_instance();

  void Swap(Flush* other);

  // implements Message ----------------------------------------------

  Flush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Flush& from);
  void MergeFrom(const Flush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stream_name = 1;
  inline bool has_stream_name() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 1;
  inline const ::std::string& stream_name() const;
  inline void set_stream_name(const ::std::string& value);
  inline void set_stream_name(const char* value);
  inline void set_stream_name(const char* value, size_t size);
  inline ::std::string* mutable_stream_name();
  inline ::std::string* release_stream_name();
  inline void set_allocated_stream_name(::std::string* stream_name);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Flush)
 private:
  inline void set_has_stream_name();
  inline void clear_has_stream_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stream_name_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Flush* default_instance_;
};
// -------------------------------------------------------------------

class Attempt : public ::google::protobuf::Message {
 public:
  Attempt();
  virtual ~Attempt();

  Attempt(const Attempt& from);

  inline Attempt& operator=(const Attempt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attempt& default_instance();

  void Swap(Attempt* other);

  // implements Message ----------------------------------------------

  Attempt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attempt& from);
  void MergeFrom(const Attempt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // required uint32 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // required bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string error_code = 4;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  inline const ::std::string& error_code() const;
  inline void set_error_code(const ::std::string& value);
  inline void set_error_code(const char* value);
  inline void set_error_code(const char* value, size_t size);
  inline ::std::string* mutable_error_code();
  inline ::std::string* release_error_code();
  inline void set_allocated_error_code(::std::string* error_code);

  // optional string error_message = 5;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 5;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Attempt)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 duration_;
  ::std::string* error_code_;
  ::std::string* error_message_;
  bool success_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Attempt* default_instance_;
};
// -------------------------------------------------------------------

class PutRecordResult : public ::google::protobuf::Message {
 public:
  PutRecordResult();
  virtual ~PutRecordResult();

  PutRecordResult(const PutRecordResult& from);

  inline PutRecordResult& operator=(const PutRecordResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRecordResult& default_instance();

  void Swap(PutRecordResult* other);

  // implements Message ----------------------------------------------

  PutRecordResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRecordResult& from);
  void MergeFrom(const PutRecordResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
  inline int attempts_size() const;
  inline void clear_attempts();
  static const int kAttemptsFieldNumber = 1;
  inline const ::aws::kinesis::protobuf::Attempt& attempts(int index) const;
  inline ::aws::kinesis::protobuf::Attempt* mutable_attempts(int index);
  inline ::aws::kinesis::protobuf::Attempt* add_attempts();
  inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >&
      attempts() const;
  inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >*
      mutable_attempts();

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string shard_id = 3;
  inline bool has_shard_id() const;
  inline void clear_shard_id();
  static const int kShardIdFieldNumber = 3;
  inline const ::std::string& shard_id() const;
  inline void set_shard_id(const ::std::string& value);
  inline void set_shard_id(const char* value);
  inline void set_shard_id(const char* value, size_t size);
  inline ::std::string* mutable_shard_id();
  inline ::std::string* release_shard_id();
  inline void set_allocated_shard_id(::std::string* shard_id);

  // optional string sequence_number = 4;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 4;
  inline const ::std::string& sequence_number() const;
  inline void set_sequence_number(const ::std::string& value);
  inline void set_sequence_number(const char* value);
  inline void set_sequence_number(const char* value, size_t size);
  inline ::std::string* mutable_sequence_number();
  inline ::std::string* release_sequence_number();
  inline void set_allocated_sequence_number(::std::string* sequence_number);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.PutRecordResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_shard_id();
  inline void clear_has_shard_id();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt > attempts_;
  ::std::string* shard_id_;
  ::std::string* sequence_number_;
  bool success_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static PutRecordResult* default_instance_;
};
// -------------------------------------------------------------------

class Credentials : public ::google::protobuf::Message {
 public:
  Credentials();
  virtual ~Credentials();

  Credentials(const Credentials& from);

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Credentials& default_instance();

  void Swap(Credentials* other);

  // implements Message ----------------------------------------------

  Credentials* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Credentials& from);
  void MergeFrom(const Credentials& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string akid = 1;
  inline bool has_akid() const;
  inline void clear_akid();
  static const int kAkidFieldNumber = 1;
  inline const ::std::string& akid() const;
  inline void set_akid(const ::std::string& value);
  inline void set_akid(const char* value);
  inline void set_akid(const char* value, size_t size);
  inline ::std::string* mutable_akid();
  inline ::std::string* release_akid();
  inline void set_allocated_akid(::std::string* akid);

  // required string secret_key = 2;
  inline bool has_secret_key() const;
  inline void clear_secret_key();
  static const int kSecretKeyFieldNumber = 2;
  inline const ::std::string& secret_key() const;
  inline void set_secret_key(const ::std::string& value);
  inline void set_secret_key(const char* value);
  inline void set_secret_key(const char* value, size_t size);
  inline ::std::string* mutable_secret_key();
  inline ::std::string* release_secret_key();
  inline void set_allocated_secret_key(::std::string* secret_key);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Credentials)
 private:
  inline void set_has_akid();
  inline void clear_has_akid();
  inline void set_has_secret_key();
  inline void clear_has_secret_key();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* akid_;
  ::std::string* secret_key_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Credentials* default_instance_;
};
// -------------------------------------------------------------------

class SetCredentials : public ::google::protobuf::Message {
 public:
  SetCredentials();
  virtual ~SetCredentials();

  SetCredentials(const SetCredentials& from);

  inline SetCredentials& operator=(const SetCredentials& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCredentials& default_instance();

  void Swap(SetCredentials* other);

  // implements Message ----------------------------------------------

  SetCredentials* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetCredentials& from);
  void MergeFrom(const SetCredentials& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool for_metrics = 1;
  inline bool has_for_metrics() const;
  inline void clear_for_metrics();
  static const int kForMetricsFieldNumber = 1;
  inline bool for_metrics() const;
  inline void set_for_metrics(bool value);

  // required .aws.kinesis.protobuf.Credentials credentials = 2;
  inline bool has_credentials() const;
  inline void clear_credentials();
  static const int kCredentialsFieldNumber = 2;
  inline const ::aws::kinesis::protobuf::Credentials& credentials() const;
  inline ::aws::kinesis::protobuf::Credentials* mutable_credentials();
  inline ::aws::kinesis::protobuf::Credentials* release_credentials();
  inline void set_allocated_credentials(::aws::kinesis::protobuf::Credentials* credentials);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.SetCredentials)
 private:
  inline void set_has_for_metrics();
  inline void clear_has_for_metrics();
  inline void set_has_credentials();
  inline void clear_has_credentials();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aws::kinesis::protobuf::Credentials* credentials_;
  bool for_metrics_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static SetCredentials* default_instance_;
};
// -------------------------------------------------------------------

class Dimension : public ::google::protobuf::Message {
 public:
  Dimension();
  virtual ~Dimension();

  Dimension(const Dimension& from);

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dimension& default_instance();

  void Swap(Dimension* other);

  // implements Message ----------------------------------------------

  Dimension* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dimension& from);
  void MergeFrom(const Dimension& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Dimension)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Dimension* default_instance_;
};
// -------------------------------------------------------------------

class Stats : public ::google::protobuf::Message {
 public:
  Stats();
  virtual ~Stats();

  Stats(const Stats& from);

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stats& default_instance();

  void Swap(Stats* other);

  // implements Message ----------------------------------------------

  Stats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline double count() const;
  inline void set_count(double value);

  // required double sum = 2;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 2;
  inline double sum() const;
  inline void set_sum(double value);

  // required double mean = 3;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 3;
  inline double mean() const;
  inline void set_mean(double value);

  // required double min = 4;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 4;
  inline double min() const;
  inline void set_min(double value);

  // required double max = 5;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 5;
  inline double max() const;
  inline void set_max(double value);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Stats)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double count_;
  double sum_;
  double mean_;
  double min_;
  double max_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Stats* default_instance_;
};
// -------------------------------------------------------------------

class Metric : public ::google::protobuf::Message {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();

  void Swap(Metric* other);

  // implements Message ----------------------------------------------

  Metric* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
  inline int dimensions_size() const;
  inline void clear_dimensions();
  static const int kDimensionsFieldNumber = 2;
  inline const ::aws::kinesis::protobuf::Dimension& dimensions(int index) const;
  inline ::aws::kinesis::protobuf::Dimension* mutable_dimensions(int index);
  inline ::aws::kinesis::protobuf::Dimension* add_dimensions();
  inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >&
      dimensions() const;
  inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >*
      mutable_dimensions();

  // required .aws.kinesis.protobuf.Stats stats = 3;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 3;
  inline const ::aws::kinesis::protobuf::Stats& stats() const;
  inline ::aws::kinesis::protobuf::Stats* mutable_stats();
  inline ::aws::kinesis::protobuf::Stats* release_stats();
  inline void set_allocated_stats(::aws::kinesis::protobuf::Stats* stats);

  // required uint64 seconds = 4;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 4;
  inline ::google::protobuf::uint64 seconds() const;
  inline void set_seconds(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Metric)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_stats();
  inline void clear_has_stats();
  inline void set_has_seconds();
  inline void clear_has_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension > dimensions_;
  ::aws::kinesis::protobuf::Stats* stats_;
  ::google::protobuf::uint64 seconds_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Metric* default_instance_;
};
// -------------------------------------------------------------------

class MetricsRequest : public ::google::protobuf::Message {
 public:
  MetricsRequest();
  virtual ~MetricsRequest();

  MetricsRequest(const MetricsRequest& from);

  inline MetricsRequest& operator=(const MetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsRequest& default_instance();

  void Swap(MetricsRequest* other);

  // implements Message ----------------------------------------------

  MetricsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricsRequest& from);
  void MergeFrom(const MetricsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 seconds = 2;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 2;
  inline ::google::protobuf::uint64 seconds() const;
  inline void set_seconds(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.MetricsRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_seconds();
  inline void clear_has_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 seconds_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static MetricsRequest* default_instance_;
};
// -------------------------------------------------------------------

class MetricsResponse : public ::google::protobuf::Message {
 public:
  MetricsResponse();
  virtual ~MetricsResponse();

  MetricsResponse(const MetricsResponse& from);

  inline MetricsResponse& operator=(const MetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsResponse& default_instance();

  void Swap(MetricsResponse* other);

  // implements Message ----------------------------------------------

  MetricsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricsResponse& from);
  void MergeFrom(const MetricsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aws.kinesis.protobuf.Metric metrics = 1;
  inline int metrics_size() const;
  inline void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  inline const ::aws::kinesis::protobuf::Metric& metrics(int index) const;
  inline ::aws::kinesis::protobuf::Metric* mutable_metrics(int index);
  inline ::aws::kinesis::protobuf::Metric* add_metrics();
  inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >&
      metrics() const;
  inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >*
      mutable_metrics();

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.MetricsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric > metrics_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static MetricsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Tag

// required string key = 1;
inline bool Tag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tag::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Tag::key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Tag.key)
  return *key_;
}
inline void Tag::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Tag.key)
}
inline void Tag::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Tag.key)
}
inline void Tag::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Tag.key)
}
inline ::std::string* Tag::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Tag.key)
  return key_;
}
inline ::std::string* Tag::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Tag::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Tag.key)
}

// optional string value = 2;
inline bool Tag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tag::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Tag::value() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Tag.value)
  return *value_;
}
inline void Tag::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Tag.value)
}
inline void Tag::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Tag.value)
}
inline void Tag::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Tag.value)
}
inline ::std::string* Tag::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Tag.value)
  return value_;
}
inline ::std::string* Tag::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Tag::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Tag.value)
}

// -------------------------------------------------------------------

// Record

// required uint64 partition_key_index = 1;
inline bool Record::has_partition_key_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_partition_key_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_partition_key_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_partition_key_index() {
  partition_key_index_ = GOOGLE_ULONGLONG(0);
  clear_has_partition_key_index();
}
inline ::google::protobuf::uint64 Record::partition_key_index() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.partition_key_index)
  return partition_key_index_;
}
inline void Record::set_partition_key_index(::google::protobuf::uint64 value) {
  set_has_partition_key_index();
  partition_key_index_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.partition_key_index)
}

// optional uint64 explicit_hash_key_index = 2;
inline bool Record::has_explicit_hash_key_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_explicit_hash_key_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_explicit_hash_key_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_explicit_hash_key_index() {
  explicit_hash_key_index_ = GOOGLE_ULONGLONG(0);
  clear_has_explicit_hash_key_index();
}
inline ::google::protobuf::uint64 Record::explicit_hash_key_index() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.explicit_hash_key_index)
  return explicit_hash_key_index_;
}
inline void Record::set_explicit_hash_key_index(::google::protobuf::uint64 value) {
  set_has_explicit_hash_key_index();
  explicit_hash_key_index_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.explicit_hash_key_index)
}

// required bytes data = 3;
inline bool Record::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Record::data() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.data)
  return *data_;
}
inline void Record::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.data)
}
inline void Record::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Record.data)
}
inline void Record::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Record.data)
}
inline ::std::string* Record::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Record.data)
  return data_;
}
inline ::std::string* Record::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Record::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Record.data)
}

// repeated .aws.kinesis.protobuf.Tag tags = 4;
inline int Record::tags_size() const {
  return tags_.size();
}
inline void Record::clear_tags() {
  tags_.Clear();
}
inline const ::aws::kinesis::protobuf::Tag& Record::tags(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.tags)
  return tags_.Get(index);
}
inline ::aws::kinesis::protobuf::Tag* Record::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Record.tags)
  return tags_.Mutable(index);
}
inline ::aws::kinesis::protobuf::Tag* Record::add_tags() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.Record.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >&
Record::tags() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.Record.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >*
Record::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.Record.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// AggregatedRecord

// repeated string partition_key_table = 1;
inline int AggregatedRecord::partition_key_table_size() const {
  return partition_key_table_.size();
}
inline void AggregatedRecord::clear_partition_key_table() {
  partition_key_table_.Clear();
}
inline const ::std::string& AggregatedRecord::partition_key_table(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return partition_key_table_.Get(index);
}
inline ::std::string* AggregatedRecord::mutable_partition_key_table(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return partition_key_table_.Mutable(index);
}
inline void AggregatedRecord::set_partition_key_table(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  partition_key_table_.Mutable(index)->assign(value);
}
inline void AggregatedRecord::set_partition_key_table(int index, const char* value) {
  partition_key_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::set_partition_key_table(int index, const char* value, size_t size) {
  partition_key_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline ::std::string* AggregatedRecord::add_partition_key_table() {
  return partition_key_table_.Add();
}
inline void AggregatedRecord::add_partition_key_table(const ::std::string& value) {
  partition_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const char* value) {
  partition_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const char* value, size_t size) {
  partition_key_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AggregatedRecord::partition_key_table() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return partition_key_table_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AggregatedRecord::mutable_partition_key_table() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return &partition_key_table_;
}

// repeated string explicit_hash_key_table = 2;
inline int AggregatedRecord::explicit_hash_key_table_size() const {
  return explicit_hash_key_table_.size();
}
inline void AggregatedRecord::clear_explicit_hash_key_table() {
  explicit_hash_key_table_.Clear();
}
inline const ::std::string& AggregatedRecord::explicit_hash_key_table(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return explicit_hash_key_table_.Get(index);
}
inline ::std::string* AggregatedRecord::mutable_explicit_hash_key_table(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return explicit_hash_key_table_.Mutable(index);
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  explicit_hash_key_table_.Mutable(index)->assign(value);
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const char* value) {
  explicit_hash_key_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const char* value, size_t size) {
  explicit_hash_key_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline ::std::string* AggregatedRecord::add_explicit_hash_key_table() {
  return explicit_hash_key_table_.Add();
}
inline void AggregatedRecord::add_explicit_hash_key_table(const ::std::string& value) {
  explicit_hash_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const char* value) {
  explicit_hash_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const char* value, size_t size) {
  explicit_hash_key_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AggregatedRecord::explicit_hash_key_table() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return explicit_hash_key_table_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AggregatedRecord::mutable_explicit_hash_key_table() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return &explicit_hash_key_table_;
}

// repeated .aws.kinesis.protobuf.Record records = 3;
inline int AggregatedRecord::records_size() const {
  return records_.size();
}
inline void AggregatedRecord::clear_records() {
  records_.Clear();
}
inline const ::aws::kinesis::protobuf::Record& AggregatedRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.records)
  return records_.Get(index);
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.records)
  return records_.Mutable(index);
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::add_records() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record >&
AggregatedRecord::records() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.records)
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record >*
AggregatedRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.records)
  return &records_;
}

// -------------------------------------------------------------------

// Message

// required uint64 id = 1;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Message::id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.id)
  return id_;
}
inline void Message::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Message.id)
}

// optional uint64 source_id = 2;
inline bool Message::has_source_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_source_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::uint64 Message::source_id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.source_id)
  return source_id_;
}
inline void Message::set_source_id(::google::protobuf::uint64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Message.source_id)
}

// optional .aws.kinesis.protobuf.PutRecord put_record = 3;
inline bool Message::has_put_record() const {
  return actual_message_case() == kPutRecord;
}
inline void Message::set_has_put_record() {
  _oneof_case_[0] = kPutRecord;
}
inline void Message::clear_put_record() {
  if (has_put_record()) {
    delete actual_message_.put_record_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::PutRecord& Message::put_record() const {
  return has_put_record() ? *actual_message_.put_record_
                      : ::aws::kinesis::protobuf::PutRecord::default_instance();
}
inline ::aws::kinesis::protobuf::PutRecord* Message::mutable_put_record() {
  if (!has_put_record()) {
    clear_actual_message();
    set_has_put_record();
    actual_message_.put_record_ = new ::aws::kinesis::protobuf::PutRecord;
  }
  return actual_message_.put_record_;
}
inline ::aws::kinesis::protobuf::PutRecord* Message::release_put_record() {
  if (has_put_record()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::PutRecord* temp = actual_message_.put_record_;
    actual_message_.put_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_put_record(::aws::kinesis::protobuf::PutRecord* put_record) {
  clear_actual_message();
  if (put_record) {
    set_has_put_record();
    actual_message_.put_record_ = put_record;
  }
}

// optional .aws.kinesis.protobuf.Flush flush = 4;
inline bool Message::has_flush() const {
  return actual_message_case() == kFlush;
}
inline void Message::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
inline void Message::clear_flush() {
  if (has_flush()) {
    delete actual_message_.flush_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::Flush& Message::flush() const {
  return has_flush() ? *actual_message_.flush_
                      : ::aws::kinesis::protobuf::Flush::default_instance();
}
inline ::aws::kinesis::protobuf::Flush* Message::mutable_flush() {
  if (!has_flush()) {
    clear_actual_message();
    set_has_flush();
    actual_message_.flush_ = new ::aws::kinesis::protobuf::Flush;
  }
  return actual_message_.flush_;
}
inline ::aws::kinesis::protobuf::Flush* Message::release_flush() {
  if (has_flush()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::Flush* temp = actual_message_.flush_;
    actual_message_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_flush(::aws::kinesis::protobuf::Flush* flush) {
  clear_actual_message();
  if (flush) {
    set_has_flush();
    actual_message_.flush_ = flush;
  }
}

// optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
inline bool Message::has_put_record_result() const {
  return actual_message_case() == kPutRecordResult;
}
inline void Message::set_has_put_record_result() {
  _oneof_case_[0] = kPutRecordResult;
}
inline void Message::clear_put_record_result() {
  if (has_put_record_result()) {
    delete actual_message_.put_record_result_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::PutRecordResult& Message::put_record_result() const {
  return has_put_record_result() ? *actual_message_.put_record_result_
                      : ::aws::kinesis::protobuf::PutRecordResult::default_instance();
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::mutable_put_record_result() {
  if (!has_put_record_result()) {
    clear_actual_message();
    set_has_put_record_result();
    actual_message_.put_record_result_ = new ::aws::kinesis::protobuf::PutRecordResult;
  }
  return actual_message_.put_record_result_;
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::release_put_record_result() {
  if (has_put_record_result()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::PutRecordResult* temp = actual_message_.put_record_result_;
    actual_message_.put_record_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_put_record_result(::aws::kinesis::protobuf::PutRecordResult* put_record_result) {
  clear_actual_message();
  if (put_record_result) {
    set_has_put_record_result();
    actual_message_.put_record_result_ = put_record_result;
  }
}

// optional .aws.kinesis.protobuf.Configuration configuration = 6;
inline bool Message::has_configuration() const {
  return actual_message_case() == kConfiguration;
}
inline void Message::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline void Message::clear_configuration() {
  if (has_configuration()) {
    delete actual_message_.configuration_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::Configuration& Message::configuration() const {
  return has_configuration() ? *actual_message_.configuration_
                      : ::aws::kinesis::protobuf::Configuration::default_instance();
}
inline ::aws::kinesis::protobuf::Configuration* Message::mutable_configuration() {
  if (!has_configuration()) {
    clear_actual_message();
    set_has_configuration();
    actual_message_.configuration_ = new ::aws::kinesis::protobuf::Configuration;
  }
  return actual_message_.configuration_;
}
inline ::aws::kinesis::protobuf::Configuration* Message::release_configuration() {
  if (has_configuration()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::Configuration* temp = actual_message_.configuration_;
    actual_message_.configuration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_configuration(::aws::kinesis::protobuf::Configuration* configuration) {
  clear_actual_message();
  if (configuration) {
    set_has_configuration();
    actual_message_.configuration_ = configuration;
  }
}

// optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
inline bool Message::has_metrics_request() const {
  return actual_message_case() == kMetricsRequest;
}
inline void Message::set_has_metrics_request() {
  _oneof_case_[0] = kMetricsRequest;
}
inline void Message::clear_metrics_request() {
  if (has_metrics_request()) {
    delete actual_message_.metrics_request_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::MetricsRequest& Message::metrics_request() const {
  return has_metrics_request() ? *actual_message_.metrics_request_
                      : ::aws::kinesis::protobuf::MetricsRequest::default_instance();
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::mutable_metrics_request() {
  if (!has_metrics_request()) {
    clear_actual_message();
    set_has_metrics_request();
    actual_message_.metrics_request_ = new ::aws::kinesis::protobuf::MetricsRequest;
  }
  return actual_message_.metrics_request_;
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::release_metrics_request() {
  if (has_metrics_request()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::MetricsRequest* temp = actual_message_.metrics_request_;
    actual_message_.metrics_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_metrics_request(::aws::kinesis::protobuf::MetricsRequest* metrics_request) {
  clear_actual_message();
  if (metrics_request) {
    set_has_metrics_request();
    actual_message_.metrics_request_ = metrics_request;
  }
}

// optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
inline bool Message::has_metrics_response() const {
  return actual_message_case() == kMetricsResponse;
}
inline void Message::set_has_metrics_response() {
  _oneof_case_[0] = kMetricsResponse;
}
inline void Message::clear_metrics_response() {
  if (has_metrics_response()) {
    delete actual_message_.metrics_response_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::MetricsResponse& Message::metrics_response() const {
  return has_metrics_response() ? *actual_message_.metrics_response_
                      : ::aws::kinesis::protobuf::MetricsResponse::default_instance();
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::mutable_metrics_response() {
  if (!has_metrics_response()) {
    clear_actual_message();
    set_has_metrics_response();
    actual_message_.metrics_response_ = new ::aws::kinesis::protobuf::MetricsResponse;
  }
  return actual_message_.metrics_response_;
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::release_metrics_response() {
  if (has_metrics_response()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::MetricsResponse* temp = actual_message_.metrics_response_;
    actual_message_.metrics_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_metrics_response(::aws::kinesis::protobuf::MetricsResponse* metrics_response) {
  clear_actual_message();
  if (metrics_response) {
    set_has_metrics_response();
    actual_message_.metrics_response_ = metrics_response;
  }
}

// optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
inline bool Message::has_set_credentials() const {
  return actual_message_case() == kSetCredentials;
}
inline void Message::set_has_set_credentials() {
  _oneof_case_[0] = kSetCredentials;
}
inline void Message::clear_set_credentials() {
  if (has_set_credentials()) {
    delete actual_message_.set_credentials_;
    clear_has_actual_message();
  }
}
inline const ::aws::kinesis::protobuf::SetCredentials& Message::set_credentials() const {
  return has_set_credentials() ? *actual_message_.set_credentials_
                      : ::aws::kinesis::protobuf::SetCredentials::default_instance();
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::mutable_set_credentials() {
  if (!has_set_credentials()) {
    clear_actual_message();
    set_has_set_credentials();
    actual_message_.set_credentials_ = new ::aws::kinesis::protobuf::SetCredentials;
  }
  return actual_message_.set_credentials_;
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::release_set_credentials() {
  if (has_set_credentials()) {
    clear_has_actual_message();
    ::aws::kinesis::protobuf::SetCredentials* temp = actual_message_.set_credentials_;
    actual_message_.set_credentials_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_set_credentials(::aws::kinesis::protobuf::SetCredentials* set_credentials) {
  clear_actual_message();
  if (set_credentials) {
    set_has_set_credentials();
    actual_message_.set_credentials_ = set_credentials;
  }
}

inline bool Message::has_actual_message() {
  return actual_message_case() != ACTUAL_MESSAGE_NOT_SET;
}
inline void Message::clear_has_actual_message() {
  _oneof_case_[0] = ACTUAL_MESSAGE_NOT_SET;
}
inline Message::ActualMessageCase Message::actual_message_case() const {
  return Message::ActualMessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PutRecord

// required string stream_name = 1;
inline bool PutRecord::has_stream_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRecord::set_has_stream_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRecord::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRecord::clear_stream_name() {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_->clear();
  }
  clear_has_stream_name();
}
inline const ::std::string& PutRecord::stream_name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.stream_name)
  return *stream_name_;
}
inline void PutRecord::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline void PutRecord::set_stream_name(const char* value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline void PutRecord::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline ::std::string* PutRecord::mutable_stream_name() {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.stream_name)
  return stream_name_;
}
inline ::std::string* PutRecord::release_stream_name() {
  clear_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stream_name_;
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRecord::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (stream_name) {
    set_has_stream_name();
    stream_name_ = stream_name;
  } else {
    clear_has_stream_name();
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.stream_name)
}

// required string partition_key = 2;
inline bool PutRecord::has_partition_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRecord::set_has_partition_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRecord::clear_has_partition_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRecord::clear_partition_key() {
  if (partition_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_->clear();
  }
  clear_has_partition_key();
}
inline const ::std::string& PutRecord::partition_key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.partition_key)
  return *partition_key_;
}
inline void PutRecord::set_partition_key(const ::std::string& value) {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  partition_key_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline void PutRecord::set_partition_key(const char* value) {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  partition_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline void PutRecord::set_partition_key(const char* value, size_t size) {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  partition_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline ::std::string* PutRecord::mutable_partition_key() {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.partition_key)
  return partition_key_;
}
inline ::std::string* PutRecord::release_partition_key() {
  clear_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partition_key_;
    partition_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRecord::set_allocated_partition_key(::std::string* partition_key) {
  if (partition_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partition_key_;
  }
  if (partition_key) {
    set_has_partition_key();
    partition_key_ = partition_key;
  } else {
    clear_has_partition_key();
    partition_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.partition_key)
}

// optional string explicit_hash_key = 3;
inline bool PutRecord::has_explicit_hash_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutRecord::set_has_explicit_hash_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutRecord::clear_has_explicit_hash_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutRecord::clear_explicit_hash_key() {
  if (explicit_hash_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explicit_hash_key_->clear();
  }
  clear_has_explicit_hash_key();
}
inline const ::std::string& PutRecord::explicit_hash_key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  return *explicit_hash_key_;
}
inline void PutRecord::set_explicit_hash_key(const ::std::string& value) {
  set_has_explicit_hash_key();
  if (explicit_hash_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explicit_hash_key_ = new ::std::string;
  }
  explicit_hash_key_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline void PutRecord::set_explicit_hash_key(const char* value) {
  set_has_explicit_hash_key();
  if (explicit_hash_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explicit_hash_key_ = new ::std::string;
  }
  explicit_hash_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline void PutRecord::set_explicit_hash_key(const char* value, size_t size) {
  set_has_explicit_hash_key();
  if (explicit_hash_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explicit_hash_key_ = new ::std::string;
  }
  explicit_hash_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline ::std::string* PutRecord::mutable_explicit_hash_key() {
  set_has_explicit_hash_key();
  if (explicit_hash_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explicit_hash_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  return explicit_hash_key_;
}
inline ::std::string* PutRecord::release_explicit_hash_key() {
  clear_has_explicit_hash_key();
  if (explicit_hash_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = explicit_hash_key_;
    explicit_hash_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRecord::set_allocated_explicit_hash_key(::std::string* explicit_hash_key) {
  if (explicit_hash_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explicit_hash_key_;
  }
  if (explicit_hash_key) {
    set_has_explicit_hash_key();
    explicit_hash_key_ = explicit_hash_key;
  } else {
    clear_has_explicit_hash_key();
    explicit_hash_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}

// required bytes data = 4;
inline bool PutRecord::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutRecord::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutRecord::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PutRecord::data() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.data)
  return *data_;
}
inline void PutRecord::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.data)
}
inline void PutRecord::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.data)
}
inline void PutRecord::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.data)
}
inline ::std::string* PutRecord::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.data)
  return data_;
}
inline ::std::string* PutRecord::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRecord::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.data)
}

// -------------------------------------------------------------------

// Flush

// optional string stream_name = 1;
inline bool Flush::has_stream_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Flush::set_has_stream_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Flush::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Flush::clear_stream_name() {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_->clear();
  }
  clear_has_stream_name();
}
inline const ::std::string& Flush::stream_name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Flush.stream_name)
  return *stream_name_;
}
inline void Flush::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Flush.stream_name)
}
inline void Flush::set_stream_name(const char* value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Flush.stream_name)
}
inline void Flush::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Flush.stream_name)
}
inline ::std::string* Flush::mutable_stream_name() {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Flush.stream_name)
  return stream_name_;
}
inline ::std::string* Flush::release_stream_name() {
  clear_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stream_name_;
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Flush::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (stream_name) {
    set_has_stream_name();
    stream_name_ = stream_name;
  } else {
    clear_has_stream_name();
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Flush.stream_name)
}

// -------------------------------------------------------------------

// Attempt

// required uint32 delay = 1;
inline bool Attempt::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attempt::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attempt::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attempt::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 Attempt::delay() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.delay)
  return delay_;
}
inline void Attempt::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.delay)
}

// required uint32 duration = 2;
inline bool Attempt::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attempt::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attempt::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attempt::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 Attempt::duration() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.duration)
  return duration_;
}
inline void Attempt::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.duration)
}

// required bool success = 3;
inline bool Attempt::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attempt::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attempt::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attempt::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Attempt::success() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.success)
  return success_;
}
inline void Attempt::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.success)
}

// optional string error_code = 4;
inline bool Attempt::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attempt::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attempt::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attempt::clear_error_code() {
  if (error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_code_->clear();
  }
  clear_has_error_code();
}
inline const ::std::string& Attempt::error_code() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.error_code)
  return *error_code_;
}
inline void Attempt::set_error_code(const ::std::string& value) {
  set_has_error_code();
  if (error_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_code_ = new ::std::string;
  }
  error_code_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.error_code)
}
inline void Attempt::set_error_code(const char* value) {
  set_has_error_code();
  if (error_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_code_ = new ::std::string;
  }
  error_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Attempt.error_code)
}
inline void Attempt::set_error_code(const char* value, size_t size) {
  set_has_error_code();
  if (error_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_code_ = new ::std::string;
  }
  error_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Attempt.error_code)
}
inline ::std::string* Attempt::mutable_error_code() {
  set_has_error_code();
  if (error_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Attempt.error_code)
  return error_code_;
}
inline ::std::string* Attempt::release_error_code() {
  clear_has_error_code();
  if (error_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_code_;
    error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attempt::set_allocated_error_code(::std::string* error_code) {
  if (error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_code_;
  }
  if (error_code) {
    set_has_error_code();
    error_code_ = error_code;
  } else {
    clear_has_error_code();
    error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Attempt.error_code)
}

// optional string error_message = 5;
inline bool Attempt::has_error_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attempt::set_has_error_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attempt::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attempt::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& Attempt::error_message() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.error_message)
  return *error_message_;
}
inline void Attempt::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.error_message)
}
inline void Attempt::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Attempt.error_message)
}
inline void Attempt::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Attempt.error_message)
}
inline ::std::string* Attempt::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Attempt.error_message)
  return error_message_;
}
inline ::std::string* Attempt::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attempt::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Attempt.error_message)
}

// -------------------------------------------------------------------

// PutRecordResult

// repeated .aws.kinesis.protobuf.Attempt attempts = 1;
inline int PutRecordResult::attempts_size() const {
  return attempts_.size();
}
inline void PutRecordResult::clear_attempts() {
  attempts_.Clear();
}
inline const ::aws::kinesis::protobuf::Attempt& PutRecordResult::attempts(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.attempts)
  return attempts_.Get(index);
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::mutable_attempts(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.attempts)
  return attempts_.Mutable(index);
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::add_attempts() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.PutRecordResult.attempts)
  return attempts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >&
PutRecordResult::attempts() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.PutRecordResult.attempts)
  return attempts_;
}
inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >*
PutRecordResult::mutable_attempts() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.PutRecordResult.attempts)
  return &attempts_;
}

// required bool success = 2;
inline bool PutRecordResult::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRecordResult::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRecordResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRecordResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PutRecordResult::success() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.success)
  return success_;
}
inline void PutRecordResult::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.success)
}

// optional string shard_id = 3;
inline bool PutRecordResult::has_shard_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutRecordResult::set_has_shard_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutRecordResult::clear_has_shard_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutRecordResult::clear_shard_id() {
  if (shard_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shard_id_->clear();
  }
  clear_has_shard_id();
}
inline const ::std::string& PutRecordResult::shard_id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.shard_id)
  return *shard_id_;
}
inline void PutRecordResult::set_shard_id(const ::std::string& value) {
  set_has_shard_id();
  if (shard_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shard_id_ = new ::std::string;
  }
  shard_id_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline void PutRecordResult::set_shard_id(const char* value) {
  set_has_shard_id();
  if (shard_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shard_id_ = new ::std::string;
  }
  shard_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline void PutRecordResult::set_shard_id(const char* value, size_t size) {
  set_has_shard_id();
  if (shard_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shard_id_ = new ::std::string;
  }
  shard_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline ::std::string* PutRecordResult::mutable_shard_id() {
  set_has_shard_id();
  if (shard_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shard_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.shard_id)
  return shard_id_;
}
inline ::std::string* PutRecordResult::release_shard_id() {
  clear_has_shard_id();
  if (shard_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shard_id_;
    shard_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRecordResult::set_allocated_shard_id(::std::string* shard_id) {
  if (shard_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shard_id_;
  }
  if (shard_id) {
    set_has_shard_id();
    shard_id_ = shard_id;
  } else {
    clear_has_shard_id();
    shard_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecordResult.shard_id)
}

// optional string sequence_number = 4;
inline bool PutRecordResult::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutRecordResult::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutRecordResult::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutRecordResult::clear_sequence_number() {
  if (sequence_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_number_->clear();
  }
  clear_has_sequence_number();
}
inline const ::std::string& PutRecordResult::sequence_number() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  return *sequence_number_;
}
inline void PutRecordResult::set_sequence_number(const ::std::string& value) {
  set_has_sequence_number();
  if (sequence_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_number_ = new ::std::string;
  }
  sequence_number_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline void PutRecordResult::set_sequence_number(const char* value) {
  set_has_sequence_number();
  if (sequence_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_number_ = new ::std::string;
  }
  sequence_number_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline void PutRecordResult::set_sequence_number(const char* value, size_t size) {
  set_has_sequence_number();
  if (sequence_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_number_ = new ::std::string;
  }
  sequence_number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline ::std::string* PutRecordResult::mutable_sequence_number() {
  set_has_sequence_number();
  if (sequence_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  return sequence_number_;
}
inline ::std::string* PutRecordResult::release_sequence_number() {
  clear_has_sequence_number();
  if (sequence_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sequence_number_;
    sequence_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRecordResult::set_allocated_sequence_number(::std::string* sequence_number) {
  if (sequence_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_number_;
  }
  if (sequence_number) {
    set_has_sequence_number();
    sequence_number_ = sequence_number;
  } else {
    clear_has_sequence_number();
    sequence_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}

// -------------------------------------------------------------------

// Credentials

// required string akid = 1;
inline bool Credentials::has_akid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Credentials::set_has_akid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Credentials::clear_has_akid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Credentials::clear_akid() {
  if (akid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    akid_->clear();
  }
  clear_has_akid();
}
inline const ::std::string& Credentials::akid() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.akid)
  return *akid_;
}
inline void Credentials::set_akid(const ::std::string& value) {
  set_has_akid();
  if (akid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    akid_ = new ::std::string;
  }
  akid_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.akid)
}
inline void Credentials::set_akid(const char* value) {
  set_has_akid();
  if (akid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    akid_ = new ::std::string;
  }
  akid_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Credentials.akid)
}
inline void Credentials::set_akid(const char* value, size_t size) {
  set_has_akid();
  if (akid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    akid_ = new ::std::string;
  }
  akid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Credentials.akid)
}
inline ::std::string* Credentials::mutable_akid() {
  set_has_akid();
  if (akid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    akid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.akid)
  return akid_;
}
inline ::std::string* Credentials::release_akid() {
  clear_has_akid();
  if (akid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = akid_;
    akid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Credentials::set_allocated_akid(::std::string* akid) {
  if (akid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete akid_;
  }
  if (akid) {
    set_has_akid();
    akid_ = akid;
  } else {
    clear_has_akid();
    akid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.akid)
}

// required string secret_key = 2;
inline bool Credentials::has_secret_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Credentials::set_has_secret_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Credentials::clear_has_secret_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Credentials::clear_secret_key() {
  if (secret_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secret_key_->clear();
  }
  clear_has_secret_key();
}
inline const ::std::string& Credentials::secret_key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.secret_key)
  return *secret_key_;
}
inline void Credentials::set_secret_key(const ::std::string& value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.secret_key)
}
inline void Credentials::set_secret_key(const char* value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Credentials.secret_key)
}
inline void Credentials::set_secret_key(const char* value, size_t size) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Credentials.secret_key)
}
inline ::std::string* Credentials::mutable_secret_key() {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secret_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.secret_key)
  return secret_key_;
}
inline ::std::string* Credentials::release_secret_key() {
  clear_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = secret_key_;
    secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Credentials::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secret_key_;
  }
  if (secret_key) {
    set_has_secret_key();
    secret_key_ = secret_key;
  } else {
    clear_has_secret_key();
    secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.secret_key)
}

// optional string token = 3;
inline bool Credentials::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Credentials::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Credentials::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Credentials::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& Credentials::token() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.token)
  return *token_;
}
inline void Credentials::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.token)
}
inline void Credentials::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Credentials.token)
}
inline void Credentials::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Credentials.token)
}
inline ::std::string* Credentials::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.token)
  return token_;
}
inline ::std::string* Credentials::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Credentials::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.token)
}

// -------------------------------------------------------------------

// SetCredentials

// optional bool for_metrics = 1;
inline bool SetCredentials::has_for_metrics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetCredentials::set_has_for_metrics() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetCredentials::clear_has_for_metrics() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetCredentials::clear_for_metrics() {
  for_metrics_ = false;
  clear_has_for_metrics();
}
inline bool SetCredentials::for_metrics() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.SetCredentials.for_metrics)
  return for_metrics_;
}
inline void SetCredentials::set_for_metrics(bool value) {
  set_has_for_metrics();
  for_metrics_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.SetCredentials.for_metrics)
}

// required .aws.kinesis.protobuf.Credentials credentials = 2;
inline bool SetCredentials::has_credentials() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetCredentials::set_has_credentials() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetCredentials::clear_has_credentials() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetCredentials::clear_credentials() {
  if (credentials_ != NULL) credentials_->::aws::kinesis::protobuf::Credentials::Clear();
  clear_has_credentials();
}
inline const ::aws::kinesis::protobuf::Credentials& SetCredentials::credentials() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.SetCredentials.credentials)
  return credentials_ != NULL ? *credentials_ : *default_instance_->credentials_;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::mutable_credentials() {
  set_has_credentials();
  if (credentials_ == NULL) credentials_ = new ::aws::kinesis::protobuf::Credentials;
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.SetCredentials.credentials)
  return credentials_;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::release_credentials() {
  clear_has_credentials();
  ::aws::kinesis::protobuf::Credentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void SetCredentials::set_allocated_credentials(::aws::kinesis::protobuf::Credentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    set_has_credentials();
  } else {
    clear_has_credentials();
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.SetCredentials.credentials)
}

// -------------------------------------------------------------------

// Dimension

// required string key = 1;
inline bool Dimension::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dimension::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dimension::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dimension::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Dimension::key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Dimension.key)
  return *key_;
}
inline void Dimension::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Dimension.key)
}
inline void Dimension::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Dimension.key)
}
inline void Dimension::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Dimension.key)
}
inline ::std::string* Dimension::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Dimension.key)
  return key_;
}
inline ::std::string* Dimension::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Dimension::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Dimension.key)
}

// required string value = 2;
inline bool Dimension::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dimension::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dimension::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dimension::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Dimension::value() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Dimension.value)
  return *value_;
}
inline void Dimension::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Dimension.value)
}
inline void Dimension::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Dimension.value)
}
inline void Dimension::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Dimension.value)
}
inline ::std::string* Dimension::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Dimension.value)
  return value_;
}
inline ::std::string* Dimension::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Dimension::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Dimension.value)
}

// -------------------------------------------------------------------

// Stats

// required double count = 1;
inline bool Stats::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stats::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stats::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stats::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline double Stats::count() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.count)
  return count_;
}
inline void Stats::set_count(double value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.count)
}

// required double sum = 2;
inline bool Stats::has_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stats::set_has_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stats::clear_has_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stats::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline double Stats::sum() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.sum)
  return sum_;
}
inline void Stats::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.sum)
}

// required double mean = 3;
inline bool Stats::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stats::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stats::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stats::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double Stats::mean() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.mean)
  return mean_;
}
inline void Stats::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.mean)
}

// required double min = 4;
inline bool Stats::has_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stats::set_has_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stats::clear_has_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stats::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double Stats::min() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.min)
  return min_;
}
inline void Stats::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.min)
}

// required double max = 5;
inline bool Stats::has_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stats::set_has_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stats::clear_has_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stats::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double Stats::max() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.max)
  return max_;
}
inline void Stats::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.max)
}

// -------------------------------------------------------------------

// Metric

// required string name = 1;
inline bool Metric::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metric::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metric::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metric::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.name)
  return *name_;
}
inline void Metric::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Metric.name)
}
inline void Metric::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Metric.name)
}
inline void Metric::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Metric.name)
}
inline ::std::string* Metric::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.name)
  return name_;
}
inline ::std::string* Metric::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metric::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Metric.name)
}

// repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
inline int Metric::dimensions_size() const {
  return dimensions_.size();
}
inline void Metric::clear_dimensions() {
  dimensions_.Clear();
}
inline const ::aws::kinesis::protobuf::Dimension& Metric::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.dimensions)
  return dimensions_.Get(index);
}
inline ::aws::kinesis::protobuf::Dimension* Metric::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.dimensions)
  return dimensions_.Mutable(index);
}
inline ::aws::kinesis::protobuf::Dimension* Metric::add_dimensions() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.Metric.dimensions)
  return dimensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >&
Metric::dimensions() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.Metric.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >*
Metric::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.Metric.dimensions)
  return &dimensions_;
}

// required .aws.kinesis.protobuf.Stats stats = 3;
inline bool Metric::has_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metric::set_has_stats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metric::clear_has_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metric::clear_stats() {
  if (stats_ != NULL) stats_->::aws::kinesis::protobuf::Stats::Clear();
  clear_has_stats();
}
inline const ::aws::kinesis::protobuf::Stats& Metric::stats() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::aws::kinesis::protobuf::Stats* Metric::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::aws::kinesis::protobuf::Stats;
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.stats)
  return stats_;
}
inline ::aws::kinesis::protobuf::Stats* Metric::release_stats() {
  clear_has_stats();
  ::aws::kinesis::protobuf::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void Metric::set_allocated_stats(::aws::kinesis::protobuf::Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Metric.stats)
}

// required uint64 seconds = 4;
inline bool Metric::has_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metric::set_has_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metric::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metric::clear_seconds() {
  seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_seconds();
}
inline ::google::protobuf::uint64 Metric::seconds() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.seconds)
  return seconds_;
}
inline void Metric::set_seconds(::google::protobuf::uint64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Metric.seconds)
}

// -------------------------------------------------------------------

// MetricsRequest

// optional string name = 1;
inline bool MetricsRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricsRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetricsRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetricsRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MetricsRequest::name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsRequest.name)
  return *name_;
}
inline void MetricsRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.MetricsRequest.name)
}
inline void MetricsRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.MetricsRequest.name)
}
inline void MetricsRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.MetricsRequest.name)
}
inline ::std::string* MetricsRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.MetricsRequest.name)
  return name_;
}
inline ::std::string* MetricsRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MetricsRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.MetricsRequest.name)
}

// optional uint64 seconds = 2;
inline bool MetricsRequest::has_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricsRequest::set_has_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetricsRequest::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetricsRequest::clear_seconds() {
  seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_seconds();
}
inline ::google::protobuf::uint64 MetricsRequest::seconds() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsRequest.seconds)
  return seconds_;
}
inline void MetricsRequest::set_seconds(::google::protobuf::uint64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.MetricsRequest.seconds)
}

// -------------------------------------------------------------------

// MetricsResponse

// repeated .aws.kinesis.protobuf.Metric metrics = 1;
inline int MetricsResponse::metrics_size() const {
  return metrics_.size();
}
inline void MetricsResponse::clear_metrics() {
  metrics_.Clear();
}
inline const ::aws::kinesis::protobuf::Metric& MetricsResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsResponse.metrics)
  return metrics_.Get(index);
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.MetricsResponse.metrics)
  return metrics_.Mutable(index);
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::add_metrics() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.MetricsResponse.metrics)
  return metrics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >&
MetricsResponse::metrics() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.MetricsResponse.metrics)
  return metrics_;
}
inline ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >*
MetricsResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.MetricsResponse.metrics)
  return &metrics_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
